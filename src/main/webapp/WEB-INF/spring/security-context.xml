<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- customAccessDenied를 자바빈(객체)으로 등록함 -->
	<bean id="customAccessDenied"
		  class="kr.or.ddit.security.CustomAccessDeniedHandler" ></bean>
	<bean id="customLoginSuccess"
		  class="kr.or.ddit.security.CustomLoginSuccessHandler" ></bean>

	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록함 -->
	<bean id="customPasswordEncoder"
		  class="kr.or.ddit.security.CustomNoOpPasswordEncoder" ></bean>

	<!-- 사용자정의 사용자 상세 기능 (★★★★★) -->
	<bean id="customUserDetailsService"
		  class="kr.or.ddit.security.CustomUserDetailsService" ></bean>

	<!-- customLogoutSuccessHandler(사용자정의 로그아웃 성공 처리자) -->
	<bean id="customLogoutSuccessHandler"
		  class="kr.or.ddit.security.CustomLogoutSuccessHandler" ></bean>

	<!-- xmlns : xml namespace 의 약자
		Role : 권한 (Authorization)
		permitAll : 누구나 접근 가능 / hasRole : 권한을 가진 자인가?
	 -->
	<security:http>
		<!-- URI 패턴으로 접근 제한을 설정 -->
		<!-- 모든 사원 접근 가능 -->
		<security:intercept-url pattern="/login" 		access="permitAll" />
<!-- 		<security:intercept-url pattern="/logout" 		access="permitAll" /> -->
		<security:intercept-url pattern="/join" 		access="permitAll" />
<!-- 		<security:intercept-url pattern="/joinPost" 	access="permitAll" /> -->
		<security:intercept-url pattern="/findId" 		access="permitAll" />
		<security:intercept-url pattern="/findPw" 		access="permitAll" />
		<security:intercept-url pattern="/*/*" 		access="hasAuthority('AUTH_MEM')" />
		<security:intercept-url pattern="/main"			access="hasAuthority('AUTH_MEM')" />
		<security:intercept-url pattern="/admin/*" 		access="hasAuthority('AUTH_MID')" />
		<security:intercept-url pattern="/admin/*" 		access="hasAuthority('AUTH_ADMIN')" />

		<!-- 사용자가 정의한 로그인 페이지의 URI를 지정함 -->
		<!-- customLoginSuccess -->
		<security:form-login login-page="/login" authentication-success-handler-ref="customLoginSuccess" />


<!-- 		로그인이 된 회원 중에 권한이 없을 때  -->
<!-- 		접근access 거부denied 처리자handler의 URI를 지정 -->
		<security:access-denied-handler error-page="/accessError" />

		<!-- 등록한 CustomAccessDeniedHandler를 접근 거부 처리자로 지정함
		CustomAccessDenied 객체를 reference(참조-바라본다)함 -->
		<security:access-denied-handler ref="customAccessDenied" />

		<!-- 데이터 소스를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록
		쿠키의 유효시간을 지정함
		token-validity-seconds : 쿠키의 유효시간(초) 604800초는 7일
		 -->
		 <security:remember-me data-source-ref="dataSource"
		 					   token-validity-seconds="604800"/>

		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화 함
		customLogoutSuccessHandler(사용자정의 로그아웃 성공 처리자)
		JSESSION_ID : 웹브라우저(유일한 세션)의 그 유일한 세션값을 쿠키에 담고 있음
		-->
		<security:logout logout-url="/logout" invalidate-session="true"
			  success-handler-ref="customLogoutSuccessHandler"
			  delete-cookies="remember-me, JSESSION_ID" />
	</security:http>

	<security:authentication-manager>
		<!-- 지정된 아이디와 패스워드로 로그인이 가능하도록 설정
		authentication-provider : 인증(로그인) 제공자
		-->
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정(암호화를 안쓰겠다라는 의미) -->
			<security:password-encoder ref="customPasswordEncoder"/>

		</security:authentication-provider>

	</security:authentication-manager>


</beans>