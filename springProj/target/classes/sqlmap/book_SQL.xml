<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일이 여러개일 수 있으므로
	이를 구별하기 위한 식별 용도로 사용
 -->
<mapper namespace="book">

<resultMap type="bookVO" id="bookMap">
		<result property="bookId" column="BOOK_ID"/> <!-- id로 바꿔서 조인했던걸 한눈에 확인할 수 있도록! / 기본키를 매핑할 때 씀 : id!   -->
		<result property="title" column="TITLE"/> 
		<result property="category" column="CATEGORY"/> 
		<result property="price" column="PRICE"/> 
		<result property="insertDate" column="INSERT_DATE"/> 
		<result property="content" column="CONTENT"/> 
		<collection property="attachVOList" resultMap="attachMap"></collection> <!-- 컬렉션은 일대다의 관계  -->
	</resultMap>
	
	<resultMap type="attachVO" id="attachMap">
		<result property="etpId" column="ETP_ID" /> 
		<result property="seq" column="SEQ" />  
		<result property="filename" column="FILENAME" /> 
		<result property="filesize" column="FILESIZE" />  
		<result property="thumbnail" column="THUMBNAIL" /> 
		<result property="regdate" column="REGDATE" />  
	</resultMap>
	
	<!-- MyBatis에서 제공해주는 데이터 입력을 나타내는 태그
		1) 드루와 : Dao 객체가 던진 데이터타입. parameterType만 씀
		2) 가즈아 : Dao 객체의 메소드 쪽으로 리턴할 타입. insert/update/delete의 경우 생략(당연히 int)
			- resultType : String, int, hashMap, VO
			- resultMap : 1:N의 관계. MyBatis의 resultMap 태그를 사용
	 -->
	 <!-- 
	 	(전) bookVO{bookId:0,title:개똥이글로리,category:소설,price:10000,insertDate:null
 					content:null}
 		(후) bookVO{bookId:1,title:개똥이글로리,category:소설,price:10000,insertDate:null
 					content:null}
 		마이바티스 쿼리 XML에 전달되면 샵{멤버변수}로 작성하여 값으로 치환함
	  -->
	 <sql id="where">
		<!-- 검색 -->
		<if test="keyword!=null and keyword!=''">
	    AND    (
	    		    TITLE 	 LIKE '%' || #{keyword} || '%'
			    OR  CATEGORY LIKE '%' || #{keyword} || '%'
			    OR  CONTENT  LIKE '%' || #{keyword} || '%'
			   )
	    </if>
	</sql>
	
	<insert id="createPost" parameterType="bookVO">
		<!-- 키를 높이면 락(rok)커가 될 수 있을까? -->
		<selectKey resultType="int" order="BEFORE" keyProperty="bookId"> <!-- bookId가  parameterType="bookVO"에 먼저 set되고 나중에 반환받을 때는 셀렉트키로 set된 vo가 반환되어 셀렉트키를 쓸 수 있는것임--> 
			SELECT NVL(MAX(BOOK_ID),0)+1 FROM BOOK
		</selectKey>
	
		INSERT INTO BOOK(BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE, CONTENT)
		VALUES(#{bookId},#{title},#{category},#{price},SYSDATE,#{cont})
	</insert>
	<!-- p.71 -->
	<!-- 책 상세보기 
		select 태그는 조회(select) 쿼리를 실행하기 위한 mybatis 태그
		드루와 : parameterType(book_SQL.xml로 드루와)-bookVO 타입
		가즈아 : resultType(BookDao로 가즈아)-bookVO 타입
		
		(전) bookVO{bookId:2,title:null,category:null,price:0,insertDate:null
 					content:null}
 		(후) bookVO{bookId:2,title:개똥이글로리,category:소설,price:10000,insertDate:23/01/20
 					content:더글로리 후속작}
	 -->
	
	<select id="detail" parameterType="bookVO" resultMap="bookMap"><!-- LprodVO에 attachVO타입의 리스트를 쓰고 싶다! => 일대다 관계  -->
	SELECT A.BOOK_ID, A.TITLE, A.CATEGORY, A.PRICE, A.INSERT_DATE, A.CONTENT
		   , B.SEQ, B.FILENAME, B.FILESIZE, B.THUMBNAIL, B.REGDATE, B.ETP_ID
	FROM BOOK A                             
    LEFT OUTER JOIN ATTACH B             
    ON (TO_CHAR(A.BOOK_ID) = ETP_ID)
    WHERE A.BOOK_ID = #{bookId}
	</select>
	
	<!-- 책 수정하기. update 태그는 update 쿼리를 실행하기 위한 마이바티스 태그 -->
	<!-- 
	BookVO [bookId=2, title=친구2, category=드라마2, price=120002, insertDate=null, content=<p>고만해라 마이 무거따아이가2</p>]
	 insert/update/delete의 경우 resultType 생략 가능(당연히 int)
	 -->
	<update id="updatePost" parameterType="bookVO">
		UPDATE BOOK
		SET    TITLE=#{title},CATEGORY=#{category}
			  ,PRICE=#{price},INSERT_DATE=SYSDATE,CONTENT=#{content}
		WHERE  BOOK_ID = #{bookId}
	</update>
	
	<!-- parameterType : int, String, bookVO, hashMap 
	BookVO [bookId=2, title=null, category=null, price=0, insertDate=null, content=null]
	-->
	<delete id="deletePost" parameterType="bookVO">
		DELETE FROM BOOK
		WHERE  BOOK_ID IN(#{bookId})
	</delete>
	
	<!-- 
	 책 목록
	 parameterType : String keyword
	 
	 where 1 = 1은 늘 참(true)임
	 조건이 2개 이상일 때 where + and
	 조건이 1개일 때       생략      + where이어야 함. 불편함
	 => where 1 = 1로 개선
	 조건이 2개 이상일 때 and + and
	 조건이 1개일 때       생략   + and이어야 함
	 
	 this.sqlSessionTemplate.selectList("book.list",keyword)
	 -->
	<select id="list" parameterType="hashMap" resultType="bookVO">
		WITH T AS(
		    SELECT ROW_NUMBER() OVER(ORDER BY BOOK_ID DESC) RNUM
		    --, ROWNUM NUM1
		    , BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE, CONTENT
		    FROM   BOOK
		    WHERE  1 = 1
		    <include refid="where"></include>
		)
		SELECT T.RNUM, T.BOOK_ID, T.TITLE, T.CATEGORY, T.PRICE
		     , T.INSERT_DATE, T.CONTENT 
		FROM   T
		WHERE  T.RNUM BETWEEN (#{currentPage}*#{size})-(#{size}-1) 
					AND (#{currentPage}*#{size})
	</select>
	
	<!-- 다중 insert 시 update 태그를 사용하지
		드루와 : List<AttachVO> attachVOList 
		가즈아 : insert, update, delete의 경우 resultType은 생략
	 -->
	 <update id="createPostAttach" parameterType="java.util.List">
	 	<!-- 
	 	order="BEFORE"는 foreach 태그 실행 전에 selectKey부터 실행
	 	 -->
	 	<selectKey resultType="int" order="BEFORE" keyProperty="seq">
	 		SELECT NVL(MAX(SEQ),0)+1 FROM ATTACH
	 	</selectKey>
	 	<!-- index : 반복 시 index값. 0부터 시작. -->
	 	<foreach collection="list" item="attachVO" 
	 		open="INSERT ALL" close="SELECT * FROM DUAL" separator=" "
	 		index="idx">
	 		INTO ATTACH(SEQ, FILENAME, FILESIZE, THUMBNAIL, REGDATE, ETP_ID) 
		    VALUES(#{idx}+#{seq},#{attachVO.filename},#{attachVO.filesize},#{attachVO.thumbnail},sysdate
		    ,#{attachVO.etpId})
	 	</foreach><!-- 셀렉트키는 한번나오면 끝이고 인덱스가 0부터 1씩 늘어나서 반복문이 돌아가는 것임! -->
	 </update>
	 
	 <select id="getTotal" parameterType="String" resultType="int">
	  SELECT COUNT(*) FROM BOOK
	  WHERE 1=1 
	  <include refid="where"></include> 
	 </select>
</mapper>















