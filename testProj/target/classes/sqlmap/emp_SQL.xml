<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일이 여러개일 수 있으므로
	이를 구별하기 위한 식별 용도로 사용
 -->
<mapper namespace="kr.or.ddit.mapper.EmpMapper">

	<sql id="where">
		<!-- 조건 검색 -->
		<if test="keyword!=null and keyword!=''">
		AND    (T.EMP_NUM   LIKE '%' || #{keyword} || '%'
		OR     T.EMP_NM 	LIKE '%' || #{keyword} || '%'
		OR     T.EMP_MJ_NUM LIKE '%' || #{keyword} || '%')
		</if>
	</sql>

	<!-- 다음 직원번호를 가져옴 -->
	<select id="getEmpNum" resultType="String">
		SELECT NVL(SUBSTR(MAX(EMP_NUM),1,3),'EMP')
		     || TRIM(TO_CHAR(NVL(SUBSTR(MAX(EMP_NUM),4),0) + 1,'000'))
		FROM   EMP
	</select>

	<!-- 신규 직원 등록 및 수정 처리 -->
   <insert id="createPost" parameterType="empVO">
      <selectKey resultType="String" order="AFTER" keyProperty="empNum">
         SELECT MAX(EMP_NUM)
         FROM   EMP
      </selectKey>
   
      MERGE INTO EMP A
      USING DUAL 
      ON(A.EMP_NUM = #{empNum})
      WHEN MATCHED THEN
          UPDATE SET EMP_ADDR = #{empAddr}, EMP_PNE=#{empPne},
                     EMP_NM = #{empNm}, EMP_PAY=#{empPay}, EMP_MJ_NUM=#{empMjNum}
      WHEN NOT MATCHED THEN
          INSERT(EMP_NUM, EMP_ADDR, EMP_PNE, EMP_NM, EMP_PAY, EMP_MJ_NUM)
          VALUES((
             SELECT NVL(SUBSTR(MAX(EMP_NUM),1,3),'EMP')
              || TRIM(TO_CHAR(NVL(SUBSTR(MAX(EMP_NUM),4),0) + 1,'000'))
            FROM   EMP
          )
          ,#{empAddr},#{empPne},#{empNm},#{empPay},#{empMjNum})
   </insert>
	
	<!-- 직원 상세 보기(관리자가 있으면 관리자 정보도 포함) 
	드루와 : empVO[empNum:EMP007,empAddr:null,empPne:null....]
	가즈아 : empVO[[empNum:EMP007,empAddr:대전,empPne:010-....]
				 [empNum:EMP006,empAddr:대전,empPne:010-....]]
	-->
	<select id="detail" parameterType="empVO" resultType="empVO">
		SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY, A.EMP_MJ_NUM
		FROM   EMP A
		WHERE  A.EMP_NUM = #{empNum}
		OR     A.EMP_NUM = (
		        SELECT B.EMP_MJ_NUM FROM EMP B WHERE B.EMP_NUM = #{empNum}
		    )
	</select><!-- in연산자도 될 것 같음 -->
	
	<!-- 모든 직원 정보 가져오기 -->
	<select id="getEmpAll" resultType="empVO">
		SELECT EMP_NUM, EMP_ADDR, EMP_PNE, EMP_NM, EMP_PAY, EMP_MJ_NUM
		FROM   EMP
		ORDER BY EMP_NUM
	</select>
	
	<delete id="deletePost" parameterType="empVO">
		DELETE FROM EMP
		WHERE EMP_NUM = #{empNum}
	</delete>
	
	
	<!-- 직원 목록 
	드루와 : map{show=10,keyword=개똥이}
	LIKE와 함게 사용한 퍼센트(여러글자), 언더바(한글자)를 와일드카드라고 함 
	-->
	<select id="list" parameterType="hashMap" resultType="empVO">
		SELECT *
		FROM
		(
		    WITH T AS(
		        SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY
		             , A.EMP_MJ_NUM
		             , (SELECT B.EMP_NM FROM EMP B WHERE B.EMP_NUM = A.EMP_MJ_NUM) EMP_MJ_NM
		        FROM   EMP A
		        START WITH A.EMP_MJ_NUM IS NULL
		        CONNECT BY PRIOR A.EMP_NUM = A.EMP_MJ_NUM
		    )
		    SELECT ROWNUM RNUM
		         , T.EMP_NUM, T.EMP_ADDR, T.EMP_PNE, T.EMP_NM, T.EMP_PAY
		         , T.EMP_MJ_NUM, T.EMP_MJ_NM
		    FROM   T
		    WHERE  1 = 1
		    <include refid="where"></include>
		) U
		WHERE U.RNUM BETWEEN (#{currentPage} * #{show})-(#{show}-1) AND (#{currentPage} * #{show})
	</select>
	
	<select id="showMj" resultType="empVO" parameterType="empVO">
	SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY, A.EMP_MJ_NUM
			, (SELECT B.EMP_NM FROM EMP B WHERE B.EMP_NUM = A.EMP_MJ_NUM) EMP_MJ_NM
		FROM   EMP A
		WHERE  A.EMP_NUM = #{empNum}
	</select>
	
	<!-- 목록의 행 수를 구함 -->
	<select id="getTotal" parameterType="hashMap" resultType="int">
		WITH T AS(
		    SELECT A.EMP_NUM, A.EMP_ADDR, A.EMP_PNE, A.EMP_NM, A.EMP_PAY
		         , A.EMP_MJ_NUM
		         , (SELECT B.EMP_NM FROM EMP B WHERE B.EMP_NUM = A.EMP_MJ_NUM) EMP_MJ_NM
		    FROM   EMP A
		    START WITH A.EMP_MJ_NUM IS NULL
		    CONNECT BY PRIOR A.EMP_NUM = A.EMP_MJ_NUM
		)
		SELECT COUNT(*) TOTAL
		FROM   T
		WHERE  1 = 1
		<include refid="where"></include>
	</select>
</mapper>















